# Generated by Django 5.2.5 on 2025-09-30 00:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_post_reportestrike_seguidor_invitacionevento_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comentario',
            fields=[
                ('id_comentario', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Comentario')),
                ('contenido', models.TextField(verbose_name='Contenido del comentario')),
                ('fecha_comentario', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_edicion', models.DateTimeField(auto_now=True, verbose_name='Fecha de última edición')),
                ('id_post', models.ForeignKey(db_column='id_post', on_delete=django.db.models.deletion.CASCADE, related_name='comentarios', to='core.post', verbose_name='Post')),
                ('usuario', models.ForeignKey(db_column='usuario_id', on_delete=django.db.models.deletion.CASCADE, related_name='comentarios', to=settings.AUTH_USER_MODEL, verbose_name='Autor')),
            ],
            options={
                'verbose_name': 'Comentario',
                'verbose_name_plural': 'Comentarios',
                'db_table': 'comentario',
                'ordering': ['fecha_comentario'],
            },
        ),
        migrations.CreateModel(
            name='ItemEnWishlist',
            fields=[
                ('id_item', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Item')),
                ('cantidad', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='Cantidad deseada')),
                ('prioridad', models.CharField(choices=[('alta', 'Alta'), ('media', 'Media'), ('baja', 'Baja')], default='media', max_length=10, verbose_name='Prioridad')),
                ('notas', models.TextField(blank=True, null=True, verbose_name='Notas del usuario')),
                ('fecha_agregado', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de agregado')),
                ('fecha_comprado', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de comprado')),
                ('id_producto', models.ForeignKey(db_column='id_producto', on_delete=django.db.models.deletion.CASCADE, related_name='en_wishlists', to='core.producto', verbose_name='Producto')),
                ('id_wishlist', models.ForeignKey(db_column='id_wishlist', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.wishlist', verbose_name='Wishlist')),
            ],
            options={
                'verbose_name': 'Item en Wishlist',
                'verbose_name_plural': 'Items en Wishlist',
                'db_table': 'item_en_wishlist',
                'ordering': ['-fecha_agregado'],
            },
        ),
        migrations.CreateModel(
            name='HistorialDeRegalos',
            fields=[
                ('id_regalo_log', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Log de Regalo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de registro')),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, related_name='historial_regalos', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que regala')),
                ('id_item', models.ForeignKey(db_column='id_item', on_delete=django.db.models.deletion.CASCADE, related_name='historial_regalos', to='core.itemenwishlist', verbose_name='Item de wishlist')),
            ],
            options={
                'verbose_name': 'Historial de regalo',
                'verbose_name_plural': 'Historial de regalos',
                'db_table': 'HistorialDeRegalos',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id_like', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Like')),
                ('tipo_like', models.CharField(choices=[('post', 'Post'), ('comentario', 'Comentario')], max_length=12, verbose_name='Tipo de elemento likeado')),
                ('fecha_like', models.DateTimeField(auto_now_add=True, verbose_name='Fecha del like')),
                ('id_comentario', models.ForeignKey(blank=True, db_column='id_comentario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.comentario', verbose_name='Comentario')),
                ('id_post', models.ForeignKey(blank=True, db_column='id_post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.post', verbose_name='Post')),
                ('id_usuario', models.ForeignKey(db_column='id_usuario', on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
                'db_table': 'like',
                'ordering': ['-fecha_like'],
            },
        ),
        migrations.CreateModel(
            name='Notificacion',
            fields=[
                ('notificacion_id', models.AutoField(db_column='notificacion_id', primary_key=True, serialize=False)),
                ('tipo', models.CharField(choices=[('nuevo_mensaje', 'nuevo_mensaje'), ('nueva_invitacion', 'nueva_invitacion'), ('evento_proximo', 'evento_proximo'), ('seguimiento', 'seguimiento'), ('sistema', 'sistema')], max_length=20)),
                ('titulo', models.CharField(blank=True, max_length=120, null=True)),
                ('mensaje', models.CharField(blank=True, max_length=255, null=True)),
                ('payload', models.JSONField(blank=True, null=True)),
                ('leida', models.BooleanField(default=False)),
                ('creada_en', models.DateTimeField(auto_now_add=True)),
                ('leida_en', models.DateTimeField(blank=True, null=True)),
                ('usuario', models.ForeignKey(db_column='usuario_id', on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'db_table': 'notificaciones',
                'ordering': ['-creada_en'],
            },
        ),
        migrations.CreateModel(
            name='Perfil',
            fields=[
                ('id_perfil', models.AutoField(primary_key=True, serialize=False)),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biografía')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='fotos_perfil/', verbose_name='Foto de perfil')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('user', models.OneToOneField(db_column='id_usuario', on_delete=django.db.models.deletion.CASCADE, related_name='perfil', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfiles',
                'db_table': 'perfil',
            },
        ),
        migrations.CreateModel(
            name='PreferenciasUsuario',
            fields=[
                ('id_preferencia', models.AutoField(primary_key=True, serialize=False)),
                ('email_on_new_follower', models.BooleanField(default=True, help_text='Recibir un email cuando alguien nuevo te sigue.', verbose_name='Email por nuevo seguidor')),
                ('email_on_event_invite', models.BooleanField(default=True, help_text='Recibir un email cuando te invitan a un evento.', verbose_name='Email por invitación a evento')),
                ('email_on_birthday_reminder', models.BooleanField(default=True, help_text='Recibir recordatorios por email de los cumpleaños de tus amigos.', verbose_name='Email para recordar cumpleaños')),
                ('accepts_marketing_emails', models.BooleanField(default=False, help_text='Aceptar recibir correos con promociones y noticias.', verbose_name='Acepta correos de marketing')),
                ('user', models.OneToOneField(db_column='id_usuario', on_delete=django.db.models.deletion.CASCADE, related_name='preferencias', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preferencias de Usuario',
                'verbose_name_plural': 'Preferencias de Usuarios',
                'db_table': 'preferencias_usuario',
            },
        ),
        migrations.CreateModel(
            name='RegistroActividad',
            fields=[
                ('id_actividad', models.AutoField(primary_key=True, serialize=False, verbose_name='ID de actividad')),
                ('tipo_actividad', models.CharField(choices=[('nuevo_post', 'Nuevo Post'), ('nuevo_comentario', 'Nuevo Comentario'), ('nueva_reaccion', 'Nueva Reacción'), ('nuevo_seguidor', 'Nuevo Seguidor'), ('nuevo_regalo', 'Nuevo Regalo'), ('otro', 'Otro')], max_length=30, verbose_name='Tipo de actividad')),
                ('id_elemento', models.PositiveIntegerField(verbose_name='ID del elemento relacionado')),
                ('tabla_elemento', models.CharField(max_length=50, verbose_name='Tabla del elemento (post, comentario, etc.)')),
                ('contenido_resumen', models.CharField(max_length=255, verbose_name='Resumen de la actividad')),
                ('fecha_actividad', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de la actividad')),
                ('es_publica', models.BooleanField(default=True, verbose_name='¿Se muestra en el feed de seguidores?')),
                ('id_usuario', models.ForeignKey(db_column='id_usuario', on_delete=django.db.models.deletion.CASCADE, related_name='actividades', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que genera la actividad')),
            ],
            options={
                'verbose_name': 'Registro de actividad',
                'verbose_name_plural': 'Registros de actividad',
                'db_table': 'registro_actividad',
                'ordering': ['-fecha_actividad'],
            },
        ),
        migrations.CreateModel(
            name='Resena',
            fields=[
                ('id_resena', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Reseña')),
                ('calificacion', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación (1–5)')),
                ('titulo', models.CharField(max_length=150, verbose_name='Título')),
                ('comentario', models.CharField(max_length=1000, verbose_name='Comentario')),
                ('fecha_resena', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de reseña')),
                ('id_producto', models.ForeignKey(db_column='id_producto', on_delete=django.db.models.deletion.CASCADE, related_name='resenas', to='core.producto', verbose_name='Producto')),
                ('id_usuario', models.ForeignKey(db_column='id_usuario', on_delete=django.db.models.deletion.CASCADE, related_name='resenas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Reseña',
                'verbose_name_plural': 'Reseñas',
                'db_table': 'resena',
                'ordering': ['-fecha_resena'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id_etiqueta', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Etiqueta')),
                ('nombre_etiqueta', models.CharField(max_length=100, unique=True, verbose_name='Nombre de la etiqueta')),
                ('color', models.CharField(blank=True, max_length=20, null=True, verbose_name='Color de la etiqueta (hex o nombre)')),
            ],
            options={
                'verbose_name': 'Etiqueta',
                'verbose_name_plural': 'Etiquetas',
                'db_table': 'tags',
                'ordering': ['nombre_etiqueta'],
                'indexes': [models.Index(fields=['nombre_etiqueta'], name='idx_tag_nombre')],
            },
        ),
        migrations.AddIndex(
            model_name='comentario',
            index=models.Index(fields=['id_post'], name='idx_comentario_post'),
        ),
        migrations.AddIndex(
            model_name='comentario',
            index=models.Index(fields=['usuario'], name='idx_comentario_usuario'),
        ),
        migrations.AddIndex(
            model_name='comentario',
            index=models.Index(fields=['fecha_comentario'], name='idx_comentario_fecha'),
        ),
        migrations.AddIndex(
            model_name='itemenwishlist',
            index=models.Index(fields=['id_wishlist'], name='idx_item_wishlist'),
        ),
        migrations.AddIndex(
            model_name='itemenwishlist',
            index=models.Index(fields=['id_producto'], name='idx_item_producto'),
        ),
        migrations.AddIndex(
            model_name='itemenwishlist',
            index=models.Index(fields=['prioridad'], name='idx_item_prioridad'),
        ),
        migrations.AddIndex(
            model_name='itemenwishlist',
            index=models.Index(fields=['fecha_agregado'], name='idx_item_fecha_agregado'),
        ),
        migrations.AddConstraint(
            model_name='itemenwishlist',
            constraint=models.UniqueConstraint(fields=('id_wishlist', 'id_producto'), name='uniq_producto_por_wishlist'),
        ),
        migrations.AddIndex(
            model_name='historialderegalos',
            index=models.Index(fields=['id_item'], name='idx_histregalo_item'),
        ),
        migrations.AddIndex(
            model_name='historialderegalos',
            index=models.Index(fields=['id_user'], name='idx_histregalo_user'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['id_usuario'], name='idx_like_usuario'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['id_post'], name='idx_like_post'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['id_comentario'], name='idx_like_comentario'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['tipo_like'], name='idx_like_tipo'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['fecha_like'], name='idx_like_fecha'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('id_post__isnull', False)), fields=('id_usuario', 'id_post'), name='uniq_like_usuario_post'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('id_comentario__isnull', False)), fields=('id_usuario', 'id_comentario'), name='uniq_like_usuario_comentario'),
        ),
        migrations.AddIndex(
            model_name='notificacion',
            index=models.Index(fields=['usuario', 'leida', 'creada_en'], name='idx_notif_usuario_leida_fecha'),
        ),
        migrations.AddIndex(
            model_name='registroactividad',
            index=models.Index(fields=['id_usuario'], name='idx_act_usuario'),
        ),
        migrations.AddIndex(
            model_name='registroactividad',
            index=models.Index(fields=['tipo_actividad'], name='idx_act_tipo'),
        ),
        migrations.AddIndex(
            model_name='registroactividad',
            index=models.Index(fields=['fecha_actividad'], name='idx_act_fecha'),
        ),
        migrations.AddIndex(
            model_name='registroactividad',
            index=models.Index(fields=['es_publica'], name='idx_act_publica'),
        ),
        migrations.AddIndex(
            model_name='resena',
            index=models.Index(fields=['id_producto'], name='idx_resena_producto'),
        ),
        migrations.AddIndex(
            model_name='resena',
            index=models.Index(fields=['id_usuario'], name='idx_resena_usuario'),
        ),
        migrations.AddIndex(
            model_name='resena',
            index=models.Index(fields=['calificacion'], name='idx_resena_calificacion'),
        ),
        migrations.AddConstraint(
            model_name='resena',
            constraint=models.UniqueConstraint(fields=('id_usuario', 'id_producto'), name='uq_resena_usuario_producto'),
        ),
    ]
